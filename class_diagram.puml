@startuml
allowmixing
skinparam monochrome true
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0
skinparam wrapWidth 240

title Data Processor – Architecture & Components

package core {
  class Config {
    +load_env_file(env_file_path)
    +get(key, default)
    +get_clickhouse_config()
    +get_cmc_api_config()
    +log_level
    +log_file
  }
  class Logging {
    +setup_logging(level, file)
    +log_with_timestamp(message, component, level)
  }
}

package pipelines.tools.extractors as extractors {
  class HttpExtractor {
    +create_http_extractor(url, headers, params, name)
  }
  class ClickHouseExtractor {
    +create_clickhouse_extractor(query, name)
  }
}

package pipelines.tools.transformers as transformers {
  class Transformers {
    +create_lambda_transformer(fn, name)
    +create_type_converter(mapping)
    +create_column_transformer(mapping)
  }
}

package pipelines.tools.loaders as loaders {
  class ClickHouseLoader {
    +create_clickhouse_loader(table_name, name)
    +load_to_clickhouse(data, table)
  }
  class ClickHouseUpsertLoader {
    +create_clickhouse_upsert_loader(table, unique_keys, name)
    +upsert_to_clickhouse(data, table, keys)
  }
  class ConsoleLoader {
    +create_console_loader(name)
  }
}

package pipelines {
  class PipelineFactory {
    +create_el_pipeline(extractor, loader, name)
    +create_etl_pipeline(extractor, transformer, loader, name)
  }
  class PipelineRegistry {
    +PIPELINE_REGISTRY
  }
  class CMCPipeline {
    +create_cmc_pipeline(time_scope)
    +create_cmc_latest_pipeline()
    +create_cmc_historical_pipeline(scope)
    +transform_cmc_data_from_api(df, scope)
    +transform_cmc_data_from_latest(df, scope)
    +register_cmc_pipelines()
  }
}

package scripts {
  class Runner <<script>> {
    +scripts/run.py
    +list
    +run <pipeline_name>
  }
}

package migrations {
  class MigrationManager {
    +ClickHouseMigrationManager
    +connect()
    +run_migrations()
    +execute_migration(file)
    +status()
  }
  folder sql {
    file "001_create_cmc_latest_quotes_table.sql"
    file "002_create_cmc_hourly_table.sql"
    file "003_create_cmc_daily_table.sql"
    file "004_create_cmc_weekly_table.sql"
    file "005_create_cmc_monthly_table.sql"
    file "006_create_cmc_yearly_table.sql"
    file "007_recreate_cmc_time_scoped_tables_float.sql"
  }
}

package ops {
  class Deploy <<shell>> {
    +deploy.sh
    +rsync → venv → .env → migrate → seed → crons
  }
  class RunSh <<shell>> {
    +run.sh
    +check | list | cron_run | setup_db | migrate
  }
}

database "ClickHouse" as CH {
  class cmc_latest_quotes <<table>>
  class cmc_hourly <<table>>
  class cmc_daily <<table>>
  class cmc_weekly <<table>>
  class cmc_monthly <<table>>
  class cmc_yearly <<table>>
}

node "Server" as Server {
  artifact "/home/<user>/data-processor" as Project
  folder logs
  file "logs/cron.log"
}

' Relationships & Data Flow
Config --> CMCPipeline : provides settings
Logging ..> CMCPipeline : used by
extractors.HttpExtractor --> CMCPipeline : extract
transformers.Transformers --> CMCPipeline : transform
loaders.ClickHouseUpsertLoader --> CMCPipeline : upsert latest
loaders.ClickHouseLoader --> CMCPipeline : load historical

PipelineFactory --> CMCPipeline : builds pipelines
PipelineRegistry .. CMCPipeline : registers
Runner --> PipelineRegistry : list/run

CMCPipeline --> CH.cmc_latest_quotes : upsert (ReplacingMergeTree)
CMCPipeline --> CH.cmc_hourly : insert (JIT)
CMCPipeline --> CH.cmc_daily : insert (JIT)
CMCPipeline --> CH.cmc_weekly : insert (JIT)
CMCPipeline --> CH.cmc_monthly : insert (JIT)
CMCPipeline --> CH.cmc_yearly : insert (JIT)

MigrationManager --> CH : DDL migrations
Deploy --> Server : install code/venv/crons
RunSh --> Runner : invokes
Runner --> Server.logs : writes

note right of CH.cmc_latest_quotes
Primary key: symbol
Engine: ReplacingMergeTree(last_updated)
Partition: toYYYYMM(last_updated)
Source of truth for latest
end note

note bottom of CH.cmc_hourly
Engine: MergeTree
Float64 numerics, Array(String) tags
timestamp aligned to hour
end note

note as CRON
Crons (server):
 - latest: */5 * * * *
 - hourly: 0 * * * *
 - daily: 0 0 * * *
 - weekly: 0 0 * * 1
 - monthly: 0 0 1 * *
 - yearly: 0 0 1 1 *
end note

Server .. CRON

@enduml


